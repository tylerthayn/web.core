Running "styles" task
<ref *2> {
  util: {
    namespace: {
      get: [Function (anonymous)],
      set: [Function (anonymous)],
      exists: [Function (anonymous)]
    },
    hooker: {
      override: [Function (anonymous)],
      preempt: [Function (anonymous)],
      filter: [Function (anonymous)],
      hook: [Function (anonymous)],
      orig: [Function (anonymous)],
      unhook: [Function (anonymous)]
    },
    async: {
      default: [Object],
      apply: [Function: apply],
      applyEach: [Function: applyEach],
      applyEachSeries: [Function: applyEach],
      asyncify: [Function: asyncify],
      auto: [Function: auto],
      autoInject: [Function: autoInject],
      cargo: [Function: cargo],
      cargoQueue: [Function: cargo$1],
      compose: [Function: compose],
      concat: [Function: awaitable],
      concatLimit: [Function: awaitable],
      concatSeries: [Function: awaitable],
      constant: [Function: constant],
      detect: [Function: awaitable],
      detectLimit: [Function: awaitable],
      detectSeries: [Function: awaitable],
      dir: [Function (anonymous)],
      doUntil: [Function: doUntil],
      doWhilst: [Function: awaitable],
      each: [Function: awaitable],
      eachLimit: [Function: awaitable],
      eachOf: [Function: awaitable],
      eachOfLimit: [Function: awaitable],
      eachOfSeries: [Function: awaitable],
      eachSeries: [Function: awaitable],
      ensureAsync: [Function: ensureAsync],
      every: [Function: awaitable],
      everyLimit: [Function: awaitable],
      everySeries: [Function: awaitable],
      filter: [Function: awaitable],
      filterLimit: [Function: awaitable],
      filterSeries: [Function: awaitable],
      forever: [Function: awaitable],
      groupBy: [Function: groupBy],
      groupByLimit: [Function: awaitable],
      groupBySeries: [Function: groupBySeries],
      log: [Function (anonymous)],
      map: [Function: awaitable],
      mapLimit: [Function: awaitable],
      mapSeries: [Function: awaitable],
      mapValues: [Function: mapValues],
      mapValuesLimit: [Function: awaitable],
      mapValuesSeries: [Function: mapValuesSeries],
      memoize: [Function: memoize],
      nextTick: [Function (anonymous)],
      parallel: [Function: parallel$1],
      parallelLimit: [Function: parallelLimit],
      priorityQueue: [Function: priorityQueue],
      queue: [Function: queue$1],
      race: [Function: awaitable],
      reduce: [Function: awaitable],
      reduceRight: [Function: reduceRight],
      reflect: [Function: reflect],
      reflectAll: [Function: reflectAll],
      reject: [Function: awaitable],
      rejectLimit: [Function: awaitable],
      rejectSeries: [Function: awaitable],
      retry: [Function: retry],
      retryable: [Function: retryable],
      seq: [Function: seq],
      series: [Function: series],
      setImmediate: [Function (anonymous)],
      some: [Function: awaitable],
      someLimit: [Function: awaitable],
      someSeries: [Function: awaitable],
      sortBy: [Function: awaitable],
      timeout: [Function: timeout],
      times: [Function: times],
      timesLimit: [Function: timesLimit],
      timesSeries: [Function: timesSeries],
      transform: [Function: transform],
      tryEach: [Function: awaitable],
      unmemoize: [Function: unmemoize],
      until: [Function: until],
      waterfall: [Function: awaitable],
      whilst: [Function: awaitable],
      all: [Function: awaitable],
      allLimit: [Function: awaitable],
      allSeries: [Function: awaitable],
      any: [Function: awaitable],
      anyLimit: [Function: awaitable],
      anySeries: [Function: awaitable],
      find: [Function: awaitable],
      findLimit: [Function: awaitable],
      findSeries: [Function: awaitable],
      flatMap: [Function: awaitable],
      flatMapLimit: [Function: awaitable],
      flatMapSeries: [Function: awaitable],
      forEach: [Function: awaitable],
      forEachSeries: [Function: awaitable],
      forEachLimit: [Function: awaitable],
      forEachOf: [Function: awaitable],
      forEachOfSeries: [Function: awaitable],
      forEachOfLimit: [Function: awaitable],
      inject: [Function: awaitable],
      foldl: [Function: awaitable],
      foldr: [Function: reduceRight],
      select: [Function: awaitable],
      selectLimit: [Function: awaitable],
      selectSeries: [Function: awaitable],
      wrapSync: [Function: asyncify],
      during: [Function: awaitable],
      doDuring: [Function: awaitable]
    },
    _: [Function: lodash] {
      templateSettings: [Object],
      after: [Function: after],
      ary: [Function: ary],
      assign: [Function (anonymous)],
      assignIn: [Function (anonymous)],
      assignInWith: [Function (anonymous)],
      assignWith: [Function (anonymous)],
      at: [Function (anonymous)],
      before: [Function: before],
      bind: [Function],
      bindAll: [Function (anonymous)],
      bindKey: [Function],
      castArray: [Function: castArray],
      chain: [Function: chain],
      chunk: [Function: chunk],
      compact: [Function: compact],
      concat: [Function: concat],
      cond: [Function: cond],
      conforms: [Function: conforms],
      constant: [Function: constant],
      countBy: [Function (anonymous)],
      create: [Function: create],
      curry: [Function],
      curryRight: [Function],
      debounce: [Function: debounce],
      defaults: [Function (anonymous)],
      defaultsDeep: [Function (anonymous)],
      defer: [Function (anonymous)],
      delay: [Function (anonymous)],
      difference: [Function (anonymous)],
      differenceBy: [Function (anonymous)],
      differenceWith: [Function (anonymous)],
      drop: [Function: drop],
      dropRight: [Function: dropRight],
      dropRightWhile: [Function: dropRightWhile],
      dropWhile: [Function: dropWhile],
      fill: [Function: fill],
      filter: [Function: filter],
      flatMap: [Function: flatMap],
      flatMapDeep: [Function: flatMapDeep],
      flatMapDepth: [Function: flatMapDepth],
      flatten: [Function: flatten],
      flattenDeep: [Function: flattenDeep],
      flattenDepth: [Function: flattenDepth],
      flip: [Function: flip],
      flow: [Function (anonymous)],
      flowRight: [Function (anonymous)],
      fromPairs: [Function: fromPairs],
      functions: [Function: functions],
      functionsIn: [Function: functionsIn],
      groupBy: [Function (anonymous)],
      initial: [Function: initial],
      intersection: [Function (anonymous)],
      intersectionBy: [Function (anonymous)],
      intersectionWith: [Function (anonymous)],
      invert: [Function (anonymous)],
      invertBy: [Function (anonymous)],
      invokeMap: [Function (anonymous)],
      iteratee: [Function: iteratee],
      keyBy: [Function (anonymous)],
      keys: [Function: keys],
      keysIn: [Function: keysIn],
      map: [Function: map],
      mapKeys: [Function: mapKeys],
      mapValues: [Function: mapValues],
      matches: [Function: matches],
      matchesProperty: [Function: matchesProperty],
      memoize: [Function],
      merge: [Function (anonymous)],
      mergeWith: [Function (anonymous)],
      method: [Function (anonymous)],
      methodOf: [Function (anonymous)],
      mixin: [Function: mixin],
      negate: [Function: negate],
      nthArg: [Function: nthArg],
      omit: [Function (anonymous)],
      omitBy: [Function: omitBy],
      once: [Function: once],
      orderBy: [Function: orderBy],
      over: [Function (anonymous)],
      overArgs: [Function (anonymous)],
      overEvery: [Function (anonymous)],
      overSome: [Function (anonymous)],
      partial: [Function],
      partialRight: [Function],
      partition: [Function (anonymous)],
      pick: [Function (anonymous)],
      pickBy: [Function: pickBy],
      property: [Function: property],
      propertyOf: [Function: propertyOf],
      pull: [Function (anonymous)],
      pullAll: [Function: pullAll],
      pullAllBy: [Function: pullAllBy],
      pullAllWith: [Function: pullAllWith],
      pullAt: [Function (anonymous)],
      range: [Function (anonymous)],
      rangeRight: [Function (anonymous)],
      rearg: [Function (anonymous)],
      reject: [Function: reject],
      remove: [Function: remove],
      rest: [Function: rest],
      reverse: [Function: reverse],
      sampleSize: [Function: sampleSize],
      set: [Function: set],
      setWith: [Function: setWith],
      shuffle: [Function: shuffle],
      slice: [Function: slice],
      sortBy: [Function (anonymous)],
      sortedUniq: [Function: sortedUniq],
      sortedUniqBy: [Function: sortedUniqBy],
      split: [Function: split],
      spread: [Function: spread],
      tail: [Function: tail],
      take: [Function: take],
      takeRight: [Function: takeRight],
      takeRightWhile: [Function: takeRightWhile],
      takeWhile: [Function: takeWhile],
      tap: [Function: tap],
      throttle: [Function: throttle],
      thru: [Function: thru],
      toArray: [Function: toArray],
      toPairs: [Function (anonymous)],
      toPairsIn: [Function (anonymous)],
      toPath: [Function: toPath],
      toPlainObject: [Function: toPlainObject],
      transform: [Function: transform],
      unary: [Function: unary],
      union: [Function (anonymous)],
      unionBy: [Function (anonymous)],
      unionWith: [Function (anonymous)],
      uniq: [Function: uniq],
      uniqBy: [Function: uniqBy],
      uniqWith: [Function: uniqWith],
      unset: [Function: unset],
      unzip: [Function: unzip],
      unzipWith: [Function: unzipWith],
      update: [Function: update],
      updateWith: [Function: updateWith],
      values: [Function: values],
      valuesIn: [Function: valuesIn],
      without: [Function (anonymous)],
      words: [Function: words],
      wrap: [Function: wrap],
      xor: [Function (anonymous)],
      xorBy: [Function (anonymous)],
      xorWith: [Function (anonymous)],
      zip: [Function (anonymous)],
      zipObject: [Function: zipObject],
      zipObjectDeep: [Function: zipObjectDeep],
      zipWith: [Function (anonymous)],
      entries: [Function (anonymous)],
      entriesIn: [Function (anonymous)],
      extend: [Function (anonymous)],
      extendWith: [Function (anonymous)],
      add: [Function (anonymous)],
      attempt: [Function (anonymous)],
      camelCase: [Function (anonymous)],
      capitalize: [Function: capitalize],
      ceil: [Function (anonymous)],
      clamp: [Function: clamp],
      clone: [Function: clone],
      cloneDeep: [Function: cloneDeep],
      cloneDeepWith: [Function: cloneDeepWith],
      cloneWith: [Function: cloneWith],
      conformsTo: [Function: conformsTo],
      deburr: [Function: deburr],
      defaultTo: [Function: defaultTo],
      divide: [Function (anonymous)],
      endsWith: [Function: endsWith],
      eq: [Function: eq],
      escape: [Function: escape],
      escapeRegExp: [Function: escapeRegExp],
      every: [Function: every],
      find: [Function (anonymous)],
      findIndex: [Function: findIndex],
      findKey: [Function: findKey],
      findLast: [Function (anonymous)],
      findLastIndex: [Function: findLastIndex],
      findLastKey: [Function: findLastKey],
      floor: [Function (anonymous)],
      forEach: [Function: forEach],
      forEachRight: [Function: forEachRight],
      forIn: [Function: forIn],
      forInRight: [Function: forInRight],
      forOwn: [Function: forOwn],
      forOwnRight: [Function: forOwnRight],
      get: [Function: get],
      gt: [Function (anonymous)],
      gte: [Function (anonymous)],
      has: [Function: has],
      hasIn: [Function: hasIn],
      head: [Function: head],
      identity: [Function: identity],
      includes: [Function: includes],
      indexOf: [Function: indexOf],
      inRange: [Function: inRange],
      invoke: [Function (anonymous)],
      isArguments: [Function: baseIsArguments],
      isArray: [Function: isArray],
      isArrayBuffer: [Function (anonymous)],
      isArrayLike: [Function: isArrayLike],
      isArrayLikeObject: [Function: isArrayLikeObject],
      isBoolean: [Function: isBoolean],
      isBuffer: [Function: isBuffer],
      isDate: [Function (anonymous)],
      isElement: [Function: isElement],
      isEmpty: [Function: isEmpty],
      isEqual: [Function: isEqual],
      isEqualWith: [Function: isEqualWith],
      isError: [Function: isError],
      isFinite: [Function: isFinite],
      isFunction: [Function: isFunction],
      isInteger: [Function: isInteger],
      isLength: [Function: isLength],
      isMap: [Function (anonymous)],
      isMatch: [Function: isMatch],
      isMatchWith: [Function: isMatchWith],
      isNaN: [Function: isNaN],
      isNative: [Function: isNative],
      isNil: [Function: isNil],
      isNull: [Function: isNull],
      isNumber: [Function: isNumber],
      isObject: [Function: isObject],
      isObjectLike: [Function: isObjectLike],
      isPlainObject: [Function: isPlainObject],
      isRegExp: [Function (anonymous)],
      isSafeInteger: [Function: isSafeInteger],
      isSet: [Function (anonymous)],
      isString: [Function: isString],
      isSymbol: [Function: isSymbol],
      isTypedArray: [Function (anonymous)],
      isUndefined: [Function: isUndefined],
      isWeakMap: [Function: isWeakMap],
      isWeakSet: [Function: isWeakSet],
      join: [Function: join],
      kebabCase: [Function (anonymous)],
      last: [Function: last],
      lastIndexOf: [Function: lastIndexOf],
      lowerCase: [Function (anonymous)],
      lowerFirst: [Function (anonymous)],
      lt: [Function (anonymous)],
      lte: [Function (anonymous)],
      max: [Function: max],
      maxBy: [Function: maxBy],
      mean: [Function: mean],
      meanBy: [Function: meanBy],
      min: [Function: min],
      minBy: [Function: minBy],
      stubArray: [Function: stubArray],
      stubFalse: [Function: stubFalse],
      stubObject: [Function: stubObject],
      stubString: [Function: stubString],
      stubTrue: [Function: stubTrue],
      multiply: [Function (anonymous)],
      nth: [Function: nth],
      noConflict: [Function: noConflict],
      noop: [Function: noop],
      now: [Function (anonymous)],
      pad: [Function: pad],
      padEnd: [Function: padEnd],
      padStart: [Function: padStart],
      parseInt: [Function: parseInt],
      random: [Function: random],
      reduce: [Function: reduce],
      reduceRight: [Function: reduceRight],
      repeat: [Function: repeat],
      replace: [Function: replace],
      result: [Function: result],
      round: [Function (anonymous)],
      runInContext: [Function: runInContext],
      sample: [Function: sample],
      size: [Function: size],
      snakeCase: [Function (anonymous)],
      some: [Function: some],
      sortedIndex: [Function: sortedIndex],
      sortedIndexBy: [Function: sortedIndexBy],
      sortedIndexOf: [Function: sortedIndexOf],
      sortedLastIndex: [Function: sortedLastIndex],
      sortedLastIndexBy: [Function: sortedLastIndexBy],
      sortedLastIndexOf: [Function: sortedLastIndexOf],
      startCase: [Function (anonymous)],
      startsWith: [Function: startsWith],
      subtract: [Function (anonymous)],
      sum: [Function: sum],
      sumBy: [Function: sumBy],
      template: [Function: template],
      times: [Function: times],
      toFinite: [Function: toFinite],
      toInteger: [Function: toInteger],
      toLength: [Function: toLength],
      toLower: [Function: toLower],
      toNumber: [Function: toNumber],
      toSafeInteger: [Function: toSafeInteger],
      toString: [Function: toString],
      toUpper: [Function: toUpper],
      trim: [Function: trim],
      trimEnd: [Function: trimEnd],
      trimStart: [Function: trimStart],
      truncate: [Function: truncate],
      unescape: [Function: unescape],
      uniqueId: [Function: uniqueId],
      upperCase: [Function (anonymous)],
      upperFirst: [Function (anonymous)],
      each: [Function: forEach],
      eachRight: [Function: forEachRight],
      first: [Function: head],
      VERSION: '4.17.21',
      str: [Function],
      isBlank: [Function: isBlank],
      stripTags: [Function: stripTags],
      decapitalize: [Function: decapitalize],
      chop: [Function: chop],
      clean: [Function: clean],
      cleanDiacritics: [Function: cleanDiacritics],
      count: [Function (anonymous)],
      chars: [Function: chars],
      swapCase: [Function: swapCase],
      escapeHTML: [Function: escapeHTML],
      unescapeHTML: [Function: unescapeHTML],
      splice: [Function: splice],
      insert: [Function: insert],
      replaceAll: [Function: replaceAll],
      lines: [Function: lines],
      dedent: [Function: dedent],
      pred: [Function: succ],
      succ: [Function: succ],
      titleize: [Function: titleize],
      camelize: [Function: camelize],
      underscored: [Function: underscored],
      dasherize: [Function: dasherize],
      classify: [Function: classify],
      humanize: [Function: humanize],
      ltrim: [Function: ltrim],
      rtrim: [Function: rtrim],
      prune: [Function: prune],
      lpad: [Function: lpad],
      rpad: [Function: rpad],
      lrpad: [Function: lrpad],
      sprintf: [Function: deprecated],
      vsprintf: [Function: deprecated],
      numberFormat: [Function: numberFormat],
      strRight: [Function: strRight],
      strRightBack: [Function: strRightBack],
      strLeft: [Function: strLeft],
      strLeftBack: [Function: strLeftBack],
      toSentence: [Function: toSentence],
      toSentenceSerial: [Function: toSentenceSerial],
      slugify: [Function: slugify],
      surround: [Function: surround],
      quote: [Function: quote],
      unquote: [Function: unquote],
      naturalCmp: [Function: naturalCmp],
      levenshtein: [Function: levenshtein],
      toBoolean: [Function: toBoolean],
      exports: [Function (anonymous)],
      strip: [Function: trim],
      lstrip: [Function: ltrim],
      rstrip: [Function: rtrim],
      center: [Function: lrpad],
      rjust: [Function: lpad],
      ljust: [Function: rpad],
      q: [Function: quote],
      toBool: [Function: toBoolean],
      camelcase: [Function: camelize],
      mapChars: [Function (anonymous)]
    },
    exit: [Function: exit],
    callbackify: [Function (anonymous)],
    error: [Function (anonymous)],
    linefeed: '\r\n',
    normalizelf: [Function (anonymous)],
    kindOf: [Function (anonymous)],
    toArray: [Function: toArray],
    repeat: [Function (anonymous)],
    pluralize: [Function (anonymous)],
    recurse: [Function (anonymous)],
    spawn: [Function (anonymous)],
    task: { Task: [Function: Task], create: [Function (anonymous)] }
  },
  log: <ref *1> Log {
    always: [Circular *1],
    _options: {
      color: true,
      verbose: false,
      debug: false,
      outStream: [SyncWriteStream],
      grunt: [Circular *2],
      maxCols: null,
      muted: false
    },
    _hasLogged: true,
    verbose: VerboseLog {
      always: [Circular *1],
      _isVerbose: true,
      or: [VerboseLog],
      write: [Function: wrapper],
      writeln: [Function: wrapper],
      writetableln: [Function: wrapper],
      writelns: [Function: wrapper],
      writeflags: [Function: wrapper],
      warn: [Function: wrapper],
      error: [Function: wrapper],
      ok: [Function: wrapper],
      errorlns: [Function: wrapper],
      oklns: [Function: wrapper],
      success: [Function: wrapper],
      fail: [Function: wrapper],
      header: [Function: wrapper],
      subhead: [Function: wrapper],
      debug: [Function: wrapper]
    },
    notverbose: VerboseLog {
      always: [Circular *1],
      _isVerbose: false,
      or: [VerboseLog],
      write: [Function: wrapper],
      writeln: [Function: wrapper],
      writetableln: [Function: wrapper],
      writelns: [Function: wrapper],
      writeflags: [Function: wrapper],
      warn: [Function: wrapper],
      error: [Function: wrapper],
      ok: [Function: wrapper],
      errorlns: [Function: wrapper],
      oklns: [Function: wrapper],
      success: [Function: wrapper],
      fail: [Function: wrapper],
      header: [Function: wrapper],
      subhead: [Function: wrapper],
      debug: [Function: wrapper]
    },
    write: [Function: wrapper],
    writeln: [Function: wrapper],
    writetableln: [Function: wrapper],
    writelns: [Function: wrapper],
    writeflags: [Function: wrapper],
    warn: [Function: wrapper],
    error: [Function: wrapper],
    ok: [Function: wrapper],
    errorlns: [Function: wrapper],
    oklns: [Function: wrapper],
    success: [Function: wrapper],
    fail: [Function: wrapper],
    header: [Function: wrapper],
    subhead: [Function: wrapper],
    debug: [Function: wrapper]
  },
  template: {
    date: [Function (anonymous)] { masks: [Object], i18n: [Object] },
    today: [Function (anonymous)],
    addDelimiters: [Function (anonymous)],
    setDelimiters: [Function (anonymous)],
    process: [Function (anonymous)]
  },
  event: EventEmitter {
    _events: {},
    newListener: false,
    _conf: { wildcard: true },
    wildcard: true,
    listenerTree: {}
  },
  fail: {
    code: {
      FATAL_ERROR: 1,
      MISSING_GRUNTFILE: 2,
      TASK_FAILURE: 3,
      TEMPLATE_ERROR: 4,
      INVALID_AUTOCOMPLETE: 5,
      WARNING: 6
    },
    fatal: [Function (anonymous)],
    errorcount: 0,
    warncount: 0,
    warn: [Function (anonymous)],
    report: [Function (anonymous)]
  },
  file: {
    glob: <ref *3> [Function: glob] {
      sync: [Function],
      GlobSync: [Function: GlobSync],
      glob: [Circular *3],
      hasMagic: [Function (anonymous)],
      Glob: [Function: Glob]
    },
    minimatch: [Function: minimatch] {
      Minimatch: [Function],
      sep: '\\',
      GLOBSTAR: {},
      filter: [Function: filter],
      defaults: [Function (anonymous)],
      braceExpand: [Function (anonymous)],
      makeRe: [Function (anonymous)],
      match: [Function (anonymous)]
    },
    findup: [Function (anonymous)],
    setBase: [Function (anonymous)],
    match: [Function (anonymous)],
    isMatch: [Function (anonymous)],
    expand: [Function (anonymous)],
    expandMapping: [Function (anonymous)],
    mkdir: [Function (anonymous)],
    recurse: [Function: recurse],
    defaultEncoding: 'utf8',
    preserveBOM: false,
    read: [Function (anonymous)],
    readJSON: [Function (anonymous)],
    readYAML: [Function (anonymous)],
    write: [Function (anonymous)],
    copy: [Function: copy],
    _copy: [Function (anonymous)],
    delete: [Function (anonymous)],
    exists: [Function (anonymous)],
    isLink: [Function (anonymous)],
    isDir: [Function (anonymous)],
    isFile: [Function (anonymous)],
    isPathAbsolute: [Function (anonymous)],
    arePathsEquivalent: [Function (anonymous)],
    doesPathContain: [Function (anonymous)],
    isPathCwd: [Function (anonymous)],
    _copySymbolicLink: [Function (anonymous)],
    isPathInCwd: [Function (anonymous)]
  },
  option: [Function (anonymous)] {
    init: [Function (anonymous)],
    flags: [Function (anonymous)],
    keys: [Function (anonymous)]
  },
  config: [Function (anonymous)] {
    data: {
      clean: [Object],
      make: [Object],
      minify: [Object],
      replacements: [Object],
      styles: [Object]
    },
    escape: [Function (anonymous)],
    getPropString: [Function (anonymous)],
    getRaw: [Function (anonymous)],
    get: [Function (anonymous)],
    process: [Function (anonymous)],
    set: [Function (anonymous)],
    merge: [Function (anonymous)],
    init: [Function (anonymous)],
    requires: [Function (anonymous)]
  },
  task: Task {
    registerTask: [Function (anonymous)],
    normalizeMultiTaskFiles: [Function (anonymous)],
    registerMultiTask: [Function (anonymous)],
    registerInitTask: [Function (anonymous)],
    renameTask: [Function (anonymous)],
    runAllTargets: [Function (anonymous)],
    loadTasks: [Function (anonymous)],
    loadNpmTasks: [Function (anonymous)],
    init: [Function (anonymous)],
    _queue: [ [Object] ],
    _running: true,
    current: {
      nameArgs: 'styles',
      name: 'styles',
      args: [],
      flags: {},
      async: [Function (anonymous)],
      errorCount: [Getter],
      requires: [Function: bound ],
      requiresConfig: [Function (anonymous)],
      options: [Function (anonymous)]
    }
  },
  help: {
    initCol1: [Function (anonymous)],
    initWidths: [Function (anonymous)],
    table: [Function (anonymous)],
    queue: [
      'initOptions',
      'initTasks',
      'initWidths',
      'header',
      'usage',
      'options',
      'optionsFooter',
      'tasks',
      'footer'
    ],
    display: [Function (anonymous)],
    header: [Function (anonymous)],
    usage: [Function (anonymous)],
    initOptions: [Function (anonymous)],
    options: [Function (anonymous)],
    optionsFooter: [Function (anonymous)],
    initTasks: [Function (anonymous)],
    tasks: [Function (anonymous)],
    footer: [Function (anonymous)]
  },
  cli: [Function (anonymous)] {
    optlist: {
      help: [Object],
      base: [Object],
      color: [Object],
      gruntfile: [Object],
      debug: [Object],
      stack: [Object],
      force: [Object],
      tasks: [Object],
      npm: [Object],
      write: [Object],
      verbose: [Object],
      version: [Object],
      completion: [Object],
      preload: [Object]
    },
    tasks: [ 'styles' ],
    options: { tasks: [], npm: [] }
  },
  verbose: <ref *4> VerboseLog {
    always: <ref *1> Log {
      always: [Circular *1],
      _options: [Object],
      _hasLogged: true,
      verbose: [Circular *4],
      notverbose: [VerboseLog],
      write: [Function: wrapper],
      writeln: [Function: wrapper],
      writetableln: [Function: wrapper],
      writelns: [Function: wrapper],
      writeflags: [Function: wrapper],
      warn: [Function: wrapper],
      error: [Function: wrapper],
      ok: [Function: wrapper],
      errorlns: [Function: wrapper],
      oklns: [Function: wrapper],
      success: [Function: wrapper],
      fail: [Function: wrapper],
      header: [Function: wrapper],
      subhead: [Function: wrapper],
      debug: [Function: wrapper]
    },
    _isVerbose: true,
    or: VerboseLog {
      always: [Log],
      _isVerbose: false,
      or: [Circular *4],
      write: [Function: wrapper],
      writeln: [Function: wrapper],
      writetableln: [Function: wrapper],
      writelns: [Function: wrapper],
      writeflags: [Function: wrapper],
      warn: [Function: wrapper],
      error: [Function: wrapper],
      ok: [Function: wrapper],
      errorlns: [Function: wrapper],
      oklns: [Function: wrapper],
      success: [Function: wrapper],
      fail: [Function: wrapper],
      header: [Function: wrapper],
      subhead: [Function: wrapper],
      debug: [Function: wrapper]
    },
    write: [Function: wrapper],
    writeln: [Function: wrapper],
    writetableln: [Function: wrapper],
    writelns: [Function: wrapper],
    writeflags: [Function: wrapper],
    warn: [Function: wrapper],
    error: [Function: wrapper],
    ok: [Function: wrapper],
    errorlns: [Function: wrapper],
    oklns: [Function: wrapper],
    success: [Function: wrapper],
    fail: [Function: wrapper],
    header: [Function: wrapper],
    subhead: [Function: wrapper],
    debug: [Function: wrapper]
  },
  package: {
    _from: 'grunt@1.5.3',
    _id: 'grunt@1.5.3',
    _inBundle: false,
    _integrity: 'sha512-mKwmo4X2d8/4c/BmcOETHek675uOqw0RuA/zy12jaspWqvTp4+ZeQF1W+OTpcbncnaBsfbQJ6l0l4j+Sn/GmaQ==',
    _location: '/grunt',
    _phantomChildren: {
      abbrev: '1.1.1',
      'grunt-known-options': '2.0.0',
      interpret: '1.1.0',
      liftup: '3.0.1',
      osenv: '0.1.5',
      v8flags: '3.2.0'
    },
    _requested: {
      type: 'version',
      registry: true,
      raw: 'grunt@1.5.3',
      name: 'grunt',
      escapedName: 'grunt',
      rawSpec: '1.5.3',
      saveSpec: null,
      fetchSpec: '1.5.3'
    },
    _requiredBy: [ '#DEV:/', '#USER' ],
    _resolved: 'https://registry.npmjs.org/grunt/-/grunt-1.5.3.tgz',
    _shasum: '3214101d11257b7e83cf2b38ea173b824deab76a',
    _spec: 'grunt@1.5.3',
    _where: 'D:\\TTS\\development\\@js\\web',
    author: {
      name: 'Grunt Development Team',
      url: 'https://gruntjs.com/development-team'
    },
    bin: { grunt: 'bin/grunt' },
    bugs: { url: 'https://github.com/gruntjs/grunt/issues' },
    bundleDependencies: false,
    dependencies: {
      dateformat: '~3.0.3',
      eventemitter2: '~0.4.13',
      exit: '~0.1.2',
      'findup-sync': '~0.3.0',
      glob: '~7.1.6',
      'grunt-cli': '~1.4.3',
      'grunt-known-options': '~2.0.0',
      'grunt-legacy-log': '~3.0.0',
      'grunt-legacy-util': '~2.0.1',
      'iconv-lite': '~0.4.13',
      'js-yaml': '~3.14.0',
      minimatch: '~3.0.4',
      mkdirp: '~1.0.4',
      nopt: '~3.0.6',
      rimraf: '~3.0.2'
    },
    deprecated: false,
    description: 'The JavaScript Task Runner',
    devDependencies: {
      difflet: '~1.0.1',
      'eslint-config-grunt': '~1.0.1',
      'grunt-contrib-nodeunit': '~4.0.0',
      'grunt-contrib-watch': '~1.1.0',
      'grunt-eslint': '~18.1.0',
      temporary: '~0.0.4',
      through2: '~4.0.2'
    },
    engines: { node: '>=8' },
    files: [ 'lib', 'bin' ],
    homepage: 'https://gruntjs.com/',
    keywords: [
      'task',     'async',
      'cli',      'minify',
      'uglify',   'build',
      'lodash',   'unit',
      'test',     'qunit',
      'nodeunit', 'server',
      'init',     'scaffold',
      'make',     'jake',
      'tool'
    ],
    license: 'MIT',
    main: 'lib/grunt',
    name: 'grunt',
    repository: { type: 'git', url: 'git+https://github.com/gruntjs/grunt.git' },
    scripts: {
      test: 'node bin/grunt test',
      'test-tap': 'node bin/grunt test:tap'
    },
    version: '1.5.3'
  },
  version: '1.5.3',
  registerTask: [Function: bound ],
  registerMultiTask: [Function: bound ],
  registerInitTask: [Function: bound ],
  renameTask: [Function: bound ],
  loadTasks: [Function: bound ],
  loadNpmTasks: [Function: bound ],
  initConfig: [Function: bound ],
  warn: [Function: bound ],
  fatal: [Function: bound ],
  tasks: [Function (anonymous)]
}

Done.
